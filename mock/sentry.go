// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-healthcheck (interfaces: SentryClient,SentryHealthChecker)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	common_healthcheck "github.com/cloudtrust/common-healthcheck"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// SentryClient is a mock of SentryClient interface
type SentryClient struct {
	ctrl     *gomock.Controller
	recorder *SentryClientMockRecorder
}

// SentryClientMockRecorder is the mock recorder for SentryClient
type SentryClientMockRecorder struct {
	mock *SentryClient
}

// NewSentryClient creates a new mock instance
func NewSentryClient(ctrl *gomock.Controller) *SentryClient {
	mock := &SentryClient{ctrl: ctrl}
	mock.recorder = &SentryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SentryClient) EXPECT() *SentryClientMockRecorder {
	return m.recorder
}

// URL mocks base method
func (m *SentryClient) URL() string {
	ret := m.ctrl.Call(m, "URL")
	ret0, _ := ret[0].(string)
	return ret0
}

// URL indicates an expected call of URL
func (mr *SentryClientMockRecorder) URL() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URL", reflect.TypeOf((*SentryClient)(nil).URL))
}

// SentryHealthChecker is a mock of SentryHealthChecker interface
type SentryHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *SentryHealthCheckerMockRecorder
}

// SentryHealthCheckerMockRecorder is the mock recorder for SentryHealthChecker
type SentryHealthCheckerMockRecorder struct {
	mock *SentryHealthChecker
}

// NewSentryHealthChecker creates a new mock instance
func NewSentryHealthChecker(ctrl *gomock.Controller) *SentryHealthChecker {
	mock := &SentryHealthChecker{ctrl: ctrl}
	mock.recorder = &SentryHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SentryHealthChecker) EXPECT() *SentryHealthCheckerMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *SentryHealthChecker) HealthChecks(arg0 context.Context) []common_healthcheck.SentryReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]common_healthcheck.SentryReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *SentryHealthCheckerMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*SentryHealthChecker)(nil).HealthChecks), arg0)
}
