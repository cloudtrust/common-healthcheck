// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/common-healthcheck (interfaces: RedisClient)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/redis.go -package=mock -mock_names=RedisClient=RedisClient github.com/cloudtrust/common-healthcheck RedisClient
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// RedisClient is a mock of RedisClient interface.
type RedisClient struct {
	ctrl     *gomock.Controller
	recorder *RedisClientMockRecorder
	isgomock struct{}
}

// RedisClientMockRecorder is the mock recorder for RedisClient.
type RedisClientMockRecorder struct {
	mock *RedisClient
}

// NewRedisClient creates a new mock instance.
func NewRedisClient(ctrl *gomock.Controller) *RedisClient {
	mock := &RedisClient{ctrl: ctrl}
	mock.recorder = &RedisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RedisClient) EXPECT() *RedisClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *RedisClient) Do(cmd string, args ...any) (any, error) {
	m.ctrl.T.Helper()
	varargs := []any{cmd}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *RedisClientMockRecorder) Do(cmd any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{cmd}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*RedisClient)(nil).Do), varargs...)
}
